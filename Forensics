information:        Download the .jpg
                    We need to first access its metadata to snif for interesting information. Go to exifinfo.org or metadata2go.com and upload the file.
                    Hmm the license looks kinda fishy... It looks like base64.
                    Go to any online decoder and paste the so-called license number. You will get the {required_flag}

Matryoksha Doll:    You need a Hex editor for this. I used ghex for this.
                    On downloading the picture and opening it in the hex editor, we can see that it is supposed to be a png image.
                    In PNG inages the image starts with an IHDR and ends with an IEND. So search for the string IEND.
                    We can see that just after IEND it shows ".PK..".
                    Hence it can be verified that the bytes after IEND are supposed to be a pkzip file. 
                    So, copy-paste all code starting from the PK into a new file and give it the extension .zip.
                        $ unzip (filename.zip)
                    It will show a new directory called base_images with another .jpg file, just like a matryoksha doll.
                    Rinse and repeat the process (about 4 times in my case).
                    You will at last come uponn a text file with the {required_flag} in it.
                    If any character is unreadable just open the .txt in ghex.
Glory of the Garden:
                        $ strings garden.jph | grep pico
                    You will get your (required_flag)
                    
So meta:            Go to metadata2go.com and insert this pic.

extensions:         Try:
                        $ file flag.txt
                        flag.txt: PNG image data, 1697 x 608, 8-bit/color RGB, non-interlaced
                    Even through its extension is a ,txt, it is an.png file.
                    You can go through its HEX data it will also show PNG.
                    Just rename the file and you get the {required_flag}
                    
WhitePages:         On trying
                        $ file whitepages.txt
                        whitepages.txt: UTF-8 Unicode text, with very long lines, with no line terminators
                    So it us UTF8, but the page was blank. So either the charaacters were actual whitespaces or the ASCII were invalid.
                    On converted them to ASCII 2 types of whitespaces were found:
                        type1 = " "
                        type2 = "  "
                    So, I wrote a .py code to convert the code into binary (2 kinds of white spaces 1 and 0) using both permutations of types:
                        s = '{given string}'
                        type1 = " "
                        type2 =  " "
                        binstr = ""

                        for c in s: 
	                          if c == type1:
		                            binstr += '1'
	                           else:
	                              binstr += '0'

                        print(binstr)
                        
                      I copied the binstr and pasted it in an online binaty-to-ASCII editor and got the flag.
		      
like1000:							A .sh file has to be created in order to automate the repeated extraction and deletio of filler.txt, unless you are a either master of peristance or an android.
											The .sh file is present in this repository.

Investigative Reversing 0:
											Look at the .png using a hex editor (like GHex or just use hd)
											Find IEND. We can see:
													picoCTK{k5zsid6q_d1deedaaC}
											Is this the {required_flag}? On submitting it we get a No!!!
											
											So the problem lies with the binary file. On decompiling file with Ghidra we can see this weird code chunk:
													local_54 = 6;
  												while (local_54 < 0xf) {
    													fputc((int)(char)(local_38[local_54] + '\x05'),__stream_00);
    													local_54 = local_54 + 1;
  												}
  												fputc((int)(char)(local_29 + -3),__stream_00);
  												local_50 = 0x10;
  												while (local_50 < 0x1a) {
    													fputc((int)local_38[local_50],__stream_00);
    													local_50 = local_50 + 1;
  												}

											Further explanation is given in the .py file that is present in this repository.
											
